<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>ShubhamJain</title><description>Thoughts, stories and ideas.</description><link>http://localhost:2368/</link><generator>Ghost 0.6</generator><lastBuildDate>Sun, 16 Aug 2015 12:00:07 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Yet another intro to Functional Programming</title><description>&lt;p&gt;You know some C, C++, Java or Python or any other imperative and object oriented programming language. You've taken your hands on some functional programming earlier but didn't get the enlightenment. Or you haven't tried it at all but have been listening the buzz about it for some time and&lt;/p&gt;</description><link>http://localhost:2368/yet-another-intro-to-functional-programming/</link><guid isPermaLink="false">ff1d4b87-f651-46c8-91ce-6aa7295a8169</guid><category>Functional programming</category><category>Haskell</category><category>Algebraic data types</category><category>Pattern matching</category><category>Generics</category><dc:creator>Shubham Jain</dc:creator><pubDate>Sun, 16 Aug 2015 11:08:00 GMT</pubDate><content:encoded>&lt;p&gt;You know some C, C++, Java or Python or any other imperative and object oriented programming language. You've taken your hands on some functional programming earlier but didn't get the enlightenment. Or you haven't tried it at all but have been listening the buzz about it for some time and want to go through it. Here is this post for you! I hope you get some enlightenments before the end of post.&lt;/p&gt;

&lt;p&gt;There are two major sets of programming languages which call themselves to be following functional paradigm. One is LISP-style and another is ML-style. There are many similarities but still quite differences between these two sets of languages. In this post, I'll be talking about the later one. The programming languages which come under ML-style are ML, OcaML, Haskell, Scala, Rust etc. I'll be using Haskell for demonstration because of it's style of purity. It's just a personal preference. I even recommend people who have background in imperative languages and want to learn Rust but haven't tried any functional programming language earlier, to go through Haskell first, so they know better of Rust afterwards.&lt;/p&gt;

&lt;p&gt;Let's start!&lt;/p&gt;

&lt;h2 id="whatisterm"&gt;What is Term?  &lt;/h2&gt;

&lt;p&gt;Informally saying a term can be anything like &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;12                -- integer  
'a'               -- char  
3 + 8             -- sum of two integers  
[1, 2, 3, 4]      -- list of integers
Int               -- a type  
"Hello World!"    -- string
String            -- another type  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be &lt;strong&gt;Data&lt;/strong&gt; or &lt;strong&gt;Type&lt;/strong&gt;. I just gave these examples so that you can relate the known entities to this thing that I am introducing. But before a formal introduction of &lt;strong&gt;Term&lt;/strong&gt; you need to understand what &lt;strong&gt;Application&lt;/strong&gt; is. There is application between &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt; when you write &lt;code&gt;f(x)&lt;/code&gt; in any imperative language e.g. c++, Java etc. Yes, you see it right, it's &lt;strong&gt;Function application&lt;/strong&gt;, but here &lt;strong&gt;Application&lt;/strong&gt; is not limited to function application only, It's more fundamental than this as you will see. There is a syntax for &lt;strong&gt;Application&lt;/strong&gt; in Haskell that is&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;f x  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yes, no parenthesis at all! You can argue why such syntax is used, just wait and you will see a lot of generality is achieved by using such syntax. Now let me introduce one rule for construction of &lt;strong&gt;Term&lt;/strong&gt; that is &lt;em&gt;if &lt;code&gt;a&lt;/code&gt; is a term and &lt;code&gt;b&lt;/code&gt; is a term then &lt;code&gt;a b&lt;/code&gt; is also a term (&amp;#42; conditions apply)&lt;/em&gt;. I'll tell you about those conditions later in this post. For now, I can give you only this information about terms till we get to the end of &lt;strong&gt;Computaion&lt;/strong&gt; section. &lt;/p&gt;

&lt;h2 id="whatisarity"&gt;What is Arity?  &lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Arity&lt;/strong&gt; is the number of arguments or operands a function takes e.g. the addition function &lt;code&gt;add&lt;/code&gt; has arity 2 which can be defined in Python by&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-python"&gt;def add(x, y):  
    return x + y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In functional programming, not only functions but all terms have arity (zero or greater) since all functions are terms too. When constructing a term with &lt;strong&gt;Application&lt;/strong&gt; the former term must have a non-zero arity i.e. in term &lt;code&gt;f x&lt;/code&gt;, term &lt;code&gt;f&lt;/code&gt; must have a non-zero arity. &lt;/p&gt;

&lt;p&gt;In Haskell, all terms have arity of either zero or one and so all functions. Now you must be asking how functions with arity greater then one will be applied to its operands e.g. the &lt;code&gt;add&lt;/code&gt; function defined above in python. Here comes the concept of &lt;strong&gt;Currying&lt;/strong&gt;. Functions are &lt;strong&gt;"first class values"&lt;/strong&gt; so functions may be used as the inputs, or be returned as output from other functions. Functions taking or returning functions are called &lt;strong&gt;"Higher order functions"&lt;/strong&gt;. Function calling in imperative languages e.g. &lt;code&gt;add(x, y)&lt;/code&gt; can be written as &lt;code&gt;add x y&lt;/code&gt; in Haskell and since application is &lt;a href="https://en.wikipedia.org/wiki/Operator_associativity"&gt;left-assosiative&lt;/a&gt;, the term &lt;code&gt;add x y&lt;/code&gt; should be taken as &lt;code&gt;(add x) y&lt;/code&gt;. That means the &lt;code&gt;add&lt;/code&gt; function applies to first argument &lt;code&gt;x&lt;/code&gt; which returns another function which again takes the argument &lt;code&gt;y&lt;/code&gt; and then returns the addition &lt;code&gt;x + y&lt;/code&gt;. This is called &lt;strong&gt;Currying&lt;/strong&gt;. The same &lt;code&gt;add&lt;/code&gt; function can be defined in Python using currying style by&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-python"&gt;def add(x):  
    def add_inner(y):
        return x + y
    return add_inner
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The currying version of calling &lt;code&gt;add&lt;/code&gt; function in Python would be &lt;code&gt;add(3)(4)&lt;/code&gt; which is equivalent to &lt;code&gt;add 3 4&lt;/code&gt; in Haskell.&lt;/p&gt;

&lt;h2 id="computation"&gt;Computation  &lt;/h2&gt;

&lt;p&gt;In start of section &lt;strong&gt;What is Term?&lt;/strong&gt; I gave you some examples. Which examples do you find to be reducible to another term (able to change into a term with simpler form) ?&lt;/p&gt;

&lt;p&gt;Only one example, &lt;code&gt;3 + 8&lt;/code&gt;, which is reducible to term &lt;code&gt;11&lt;/code&gt;. And &lt;em&gt;reduction is the key to computation&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;You just give computer a term and it reduces that term to the level where it can not be reduced further. This is the ideal philosophy of computation in functional programming. So there can be terms which can't be reduced further (all other terms in the example). Different kind of models can be made to specify the rules of reductions into a language. The ML-style functional programming languages follow a constructive model containing following rules:&lt;/p&gt;

&lt;p&gt;1) A term is reducible or non-reducible. If it's non-reducible then it is said to be in its &lt;strong&gt;normal form&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;2) A term can be either in &lt;strong&gt;application&lt;/strong&gt; form or not. Recall that the term &lt;code&gt;a b&lt;/code&gt; is in &lt;strong&gt;application&lt;/strong&gt; form. Reducibility of a term in application form &lt;code&gt;a b&lt;/code&gt;, depends only on first term &lt;code&gt;a&lt;/code&gt;. And the term &lt;code&gt;a&lt;/code&gt; can be either a &lt;strong&gt;function&lt;/strong&gt; or a &lt;strong&gt;constructor&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;3) If &lt;code&gt;a&lt;/code&gt; is a &lt;strong&gt;function&lt;/strong&gt; of non-zero arity, then &lt;code&gt;a b&lt;/code&gt; is reducible, hence term &lt;code&gt;a b&lt;/code&gt; is not in normal form. (Functions having zero arity i.e. functions which take no argument are used for computations with &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side effects&lt;/a&gt; only. A function having no side effect is called a &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure function&lt;/a&gt; and I'll talking about them only in this article.)&lt;/p&gt;

&lt;p&gt;4) Else if &lt;code&gt;a&lt;/code&gt; is a &lt;strong&gt;constructor&lt;/strong&gt; of non-zero arity, then &lt;code&gt;a b&lt;/code&gt; is not reducible. And &lt;code&gt;a b&lt;/code&gt; is in its normal form.&lt;/p&gt;

&lt;p&gt;5) A &lt;strong&gt;constructor&lt;/strong&gt; of zero arity is non-reducible hence in normal form. It's also called a &lt;strong&gt;nullary constructor&lt;/strong&gt; or &lt;strong&gt;constant&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id="constructor"&gt;Constructor  &lt;/h2&gt;

&lt;p&gt;Constructors in functional programming is totally a different concept than what constructors are in any imperative language like C++ or Python. From the last section, we can fetch the definition of &lt;strong&gt;Constructor&lt;/strong&gt;. A constructor is a term that is always in its normal form and it can never be reduced further. Either it has zero arity that means it's a constant term and no other term can be applied to it, or it has arity greater than zero and new terms can be made by the application of itself and other terms. The new terms made through the application of a constructor and another term is also in its normal form. &lt;/p&gt;

&lt;h2 id="dataandtypes"&gt;Data and Types  &lt;/h2&gt;

&lt;p&gt;The term is &lt;strong&gt;leveled&lt;/strong&gt; into many categories called &lt;strong&gt;Data&lt;/strong&gt;, &lt;strong&gt;Type&lt;/strong&gt;, &lt;strong&gt;Type of types&lt;/strong&gt; (a.k.a. &lt;strong&gt;Kind&lt;/strong&gt; in Haskell) and so on. In some programming languages, there are only two levels, data and type e.g. &lt;code&gt;4&lt;/code&gt; is data and &lt;code&gt;int&lt;/code&gt; is its type in &lt;strong&gt;C&lt;/strong&gt; programming language. In Haskell, there are three levels of terms upto Kinds. In some programming languages, the levels are collapsed into single level e.g. in Python everything (data or type) is an object and treated equally. In functional programming, &lt;strong&gt;"every term has type"&lt;/strong&gt; and the term representing the type of a term belong to the next level w.r.t. the level of that term. As of now in Haskell, you can deal with only type of data and type of types (which are kinds) not further. Constructors and functions also belong to these levels since they are terms. If a constructor is used to construct some data then it's called &lt;strong&gt;Data constructor&lt;/strong&gt; otherwise if it is used to construct a type then it's called &lt;strong&gt;Type constructor&lt;/strong&gt;. Haskell has full support for data level functions and some recent support for type level functions. There is one rule regarding levels while constructing a term using &lt;strong&gt;application&lt;/strong&gt; that is &lt;em&gt;term &lt;code&gt;a b&lt;/code&gt; can be constructed from terms &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; only if &lt;code&gt;a&lt;/code&gt; &amp;amp; &lt;code&gt;b&lt;/code&gt; both belong to same level. Then the term &lt;code&gt;a b&lt;/code&gt; belongs to same level too.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="algebraicdatatypes"&gt;Algebraic data types  &lt;/h2&gt;

&lt;p&gt;A program in Haskell, contains all the declarations or definitions of constructors and functions. Since all terms have types, a particular type term can belong to some data terms which can be constructed with some data constructors only. It is done using &lt;strong&gt;Data declaration&lt;/strong&gt; in which the programmer specifies the type constructor and all the data constructors which can be used to construct a data for that type. The type and data constructors may have zero or more arguments. Data declaration starts with keyword &lt;code&gt;data&lt;/code&gt;. Here's an example of data declaration of &lt;code&gt;Bool&lt;/code&gt; type which is defined in the standard library&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;data Bool = True | False  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In data declaration, the part which comes after &lt;code&gt;data&lt;/code&gt; and before &lt;code&gt;=&lt;/code&gt; specifies the type constructor and parts which come after &lt;code&gt;=&lt;/code&gt; and are separated by &lt;code&gt;|&lt;/code&gt; symbol, specifies the data constructors which can be used to construct the data terms of that type. The &lt;code&gt;|&lt;/code&gt; should be read as "or". In this example, the type constructor &lt;code&gt;Bool&lt;/code&gt; is a nullary type constructor with two nullary data constructors &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; which behave like constants. A variable having &lt;code&gt;Bool&lt;/code&gt; value can be declared with following syntax.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;x :: Bool   -- It tells the compiler that x has type `Bool`  
x = True    -- Here the data `True` of type `Bool` has been bound to x  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's no need of first statement in above example that is type declaration of variable &lt;code&gt;x&lt;/code&gt;. Haskell can infer it's type by seeing second statement of assignment. I wrote it just to keep things clarified.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Here is another example to define Color type whose data has information of values of all three color components Red, Green and Blue.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;data Color = RGBColor Int Int Int     -- declaring the Color type

gray :: Color  
gray = RGBColor 128 128 128  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the type &lt;code&gt;Color&lt;/code&gt; has only one data constructor &lt;code&gt;RGBColor&lt;/code&gt; and &lt;code&gt;RGBColor Int Int Int&lt;/code&gt; in data declaration means it can have 3 integer arguments to carry values of red, green and blue.&lt;/p&gt;

&lt;p&gt;These types are called &lt;strong&gt;Algebraic data types&lt;/strong&gt; because these types follow similar operations to algebraic operations &lt;strong&gt;sums&lt;/strong&gt; and &lt;strong&gt;products&lt;/strong&gt; while defining their data constructors. The &lt;code&gt;Bool&lt;/code&gt; type's data constructors &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt; were written in &lt;strong&gt;sum form&lt;/strong&gt; (&lt;strong&gt;sum&lt;/strong&gt; means "or" here) while the &lt;code&gt;Color&lt;/code&gt;'s data constructor &lt;code&gt;RGBColor&lt;/code&gt; was written in &lt;strong&gt;product form&lt;/strong&gt; in which it takes 3 integer values which can be perceived as product of 3 integers (&lt;strong&gt;product&lt;/strong&gt; means "combination" here). Here's an example of data type which has both sum and product form in its data constructors.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;data Shape = Circle Float Float Float | Rectangle Float Float Float Float  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And different shapes can be defined by&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;circle :: Shape  
rect :: Shape

circle = Circle 1 1 0.5    -- Circle centered at (1,1) with radius 0.5  
rect = Rectangle 4 5 3 2   -- Rectangle centered at (4,5) with width = 3 and height = 2  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see here how variables of type &lt;code&gt;Shape&lt;/code&gt; can have value in either of two forms or variants with data constructors 'Circle' and 'Rectangle'. In this way, algebraic data types provide a more general model of relation between type and data than the model given by object oriented languages through relation between class and instances.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Let's define data type for natural numbers. A natural number is one of the values in {0,1,2,3...} .  If we recall the &lt;a href="https://en.wikipedia.org/wiki/Peano_axioms"&gt;&lt;strong&gt;Peano axioms&lt;/strong&gt;&lt;/a&gt; then its two axioms state following:&lt;/p&gt;

&lt;p&gt;1) 0 is a natural number. &lt;br&gt;
2) For every natural number n, successor of n i.e. (S n) is a natural number.&lt;/p&gt;

&lt;p&gt;So we use above axioms to construct natural number.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;data Nat = Zero | Succ Nat  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It's a recursive definition as the second data constructor &lt;code&gt;Succ&lt;/code&gt; (read as "successor of") takes an argument of same type &lt;code&gt;Nat&lt;/code&gt;. A data type defined in recursive way is called &lt;strong&gt;Recursive or Inductive data type&lt;/strong&gt;. Here's how you define some initial natural numbers using this scheme.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell "&gt;one :: Nat  
one = Succ Zero

two :: Nat  
two = Succ (Succ Zero)

three :: Nat  
three :: Succ (Succ (Succ Zero))

-- And so on...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="functions"&gt;Functions  &lt;/h2&gt;

&lt;p&gt;A function takes an argument and returns a result. Let's define a function that takes an integer and returns the square of it.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;square :: Int -&amp;gt; Int   -- the type declaration of square function  
square x = x * x       -- the function definition of square

y = square 5           -- function square is being called/reduced here. `y` stores 25  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have a new syntax in the type of function &lt;code&gt;square&lt;/code&gt;. The type &lt;code&gt;Int -&amp;gt; Int&lt;/code&gt; tells that any term having this type takes an integer and returns an integer. Before going ahead, let me tell you the most important rule of application that is &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Term &lt;code&gt;a&lt;/code&gt; can be applied to term &lt;code&gt;b&lt;/code&gt; of type &lt;code&gt;B&lt;/code&gt; if and only if &lt;code&gt;a&lt;/code&gt; has type &lt;code&gt;B -&amp;gt; C&lt;/code&gt; where &lt;code&gt;C&lt;/code&gt; can be any other arbitrary type. Then the type of term &lt;code&gt;a b&lt;/code&gt; would be &lt;code&gt;C&lt;/code&gt;. (The term &lt;code&gt;a&lt;/code&gt; can be a function or a constructor as well)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lets define the currying version of &lt;code&gt;add&lt;/code&gt; function in Haskell that I defined earlier in Python.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;add :: Int -&amp;gt; Int -&amp;gt; Int  
add x y = x + y

w = add 7 8  -- w stores 15

f = add 3    -- f is a partial function having type `Int -&amp;gt; Int`  
z = f 5      -- z stores 8  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you must be asking how terms like &lt;code&gt;x * x&lt;/code&gt; or &lt;code&gt;x + y&lt;/code&gt; get reduced further. It's because the operators &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; are infix operators hence any term in form &lt;code&gt;a + b&lt;/code&gt; is taken as &lt;code&gt;(+) a b&lt;/code&gt; by compiler. And &lt;code&gt;(+)&lt;/code&gt; and &lt;code&gt;(*)&lt;/code&gt; are actual functions which with 2 arguments get reduced to a number. In fact &lt;code&gt;-&amp;gt;&lt;/code&gt; is an infix operator too which is actually a type constructor. Hence type &lt;code&gt;A -&amp;gt; B&lt;/code&gt; can be taken as &lt;code&gt;(-&amp;gt;) A B&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The operator &lt;code&gt;-&amp;gt;&lt;/code&gt; is right associative hence the type of function &lt;code&gt;add&lt;/code&gt; should be taken as &lt;code&gt;Int -&amp;gt; (Int -&amp;gt; Int)&lt;/code&gt; in infix notation. Now it should be clear why the type of term &lt;code&gt;f&lt;/code&gt; is &lt;code&gt;Int -&amp;gt; Int&lt;/code&gt;. And since the term &lt;code&gt;add 7 8&lt;/code&gt; is taken as &lt;code&gt;(add 7) 8&lt;/code&gt;, the same partial function is made while evaluating &lt;code&gt;add 7&lt;/code&gt; and then it gets applied to &lt;code&gt;8&lt;/code&gt; and returns &lt;code&gt;15&lt;/code&gt;. This is how currying works.&lt;/p&gt;

&lt;p&gt;Constructor terms also have types just like functions. The type of constructors can be infered from the data declaration. Hence in declaring &lt;code&gt;Nat&lt;/code&gt; type by data declaration&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;data Nat = Zero | succ Nat  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The constructors &lt;code&gt;Zero&lt;/code&gt; and &lt;code&gt;Succ&lt;/code&gt; are understood as &lt;br&gt;
1) &lt;code&gt;Zero&lt;/code&gt; takes no other term for application and already of type &lt;code&gt;Nat&lt;/code&gt;. That is to say &lt;code&gt;Zero :: Nat&lt;/code&gt;. &lt;br&gt;
2) &lt;code&gt;Succ&lt;/code&gt; takes a term of type &lt;code&gt;Nat&lt;/code&gt; and returns a &lt;code&gt;Nat&lt;/code&gt;. Hence its type should be &lt;code&gt;Nat -&amp;gt; Nat&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="patternmatching"&gt;Pattern matching  &lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pattern matching&lt;/strong&gt; is a concept which can't be avoided when a programming language has the feature of algebraic data types. This concept is used with function definitions. A function is a term that takes data of particular type and returns data of another type but if the input data can have multiple variant forms due to different data constructors given in data declaration of that input type then that function has to deal will each variant of that type separately while defining its own definition.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The rule of pattern matching is simple one that any argument to a function should be a variable or one of the variant forms for the input type. And each definition of that function is checked for pattern matching from top to bottom until one matches.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, the &lt;code&gt;not&lt;/code&gt; boolean operator can be defined by pattern matching in following way&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;not :: Bool -&amp;gt; Bool

not True  = False  
not False = True

x = not False    -- `not False` matches with the second definition  
                 -- of `not` and hence reduces to `True`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let's define the add function for &lt;code&gt;Nat&lt;/code&gt; data type that we defined earlier using pattern matching.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;add_nat :: Nat -&amp;gt; Nat -&amp;gt; Nat

add_nat Zero y      = y  
add_nat (Succ x) y  = add_nat x (Succ y)    -- it's a recursive definition 

-- lets's add 2 and 1 and store it in x
x = add_nat (Succ (Succ Zero)) (Succ Zero)  

-- add_nat (Succ (Succ Zero)) (Succ Zero) reduces in following steps

-- add_nat (Succ (Succ Zero)) (Succ Zero)
-- add_nat (Succ Zero) (Succ (Succ Zero))    -- using second definition
-- add_nat Zero (Succ (Succ (Succ Zero)))    -- using second definition
-- (Succ (Succ (Succ Zero)))                 -- using first definition

-- which is nothing but 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id="generics"&gt;Generics  &lt;/h2&gt;

&lt;p&gt;Till now, the above examples introduced data declarations of nullary type constructors only e.g. &lt;code&gt;Bool&lt;/code&gt;, &lt;code&gt;Color&lt;/code&gt;, &lt;code&gt;Shape&lt;/code&gt; and &lt;code&gt;Nat&lt;/code&gt;. These nullary types are also called &lt;strong&gt;concrete types&lt;/strong&gt;. Since every term has type, what is the type (or I should say kind) of all concrete types? Answer is &lt;code&gt;*&lt;/code&gt;. What! a star? Yes, the &lt;code&gt;*&lt;/code&gt; is the type (kind) of all concrete types and this term belongs to the &lt;strong&gt;Kind&lt;/strong&gt; level.&lt;/p&gt;

&lt;p&gt;What would be the type constructors with arity greater than zero? Let's define such a type&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;data List a = Nil | Cons a (List a)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here's what you infer from this data declaration: &lt;br&gt;
1) &lt;code&gt;List a&lt;/code&gt; is a concrete type for some concrete type &lt;code&gt;a&lt;/code&gt;. Hence type (kind) of term &lt;code&gt;List&lt;/code&gt; would be &lt;code&gt;* -&amp;gt; *&lt;/code&gt;. Here, the type constructor &lt;code&gt;List&lt;/code&gt; is not a concrete type. The variable type term &lt;code&gt;a&lt;/code&gt; can be replaced by any concrete type term in &lt;code&gt;List a&lt;/code&gt; to construct a list type e.g. &lt;code&gt;List Int&lt;/code&gt;, &lt;code&gt;List Bool&lt;/code&gt;, &lt;code&gt;List Nat&lt;/code&gt; or even &lt;code&gt;List (List Int)&lt;/code&gt;. &lt;br&gt;
2) &lt;code&gt;Nil :: List a&lt;/code&gt; &lt;br&gt;
3) &lt;code&gt;Cons :: a -&amp;gt; (List a) -&amp;gt; (List a)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here's how you make a term of type &lt;code&gt;List Int&lt;/code&gt;:  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;list_of_integers :: List Int  
list_of_integers = Cons 1 (Cons 4 (Cons 5 Nil))  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you know C++, then you know about template classes and functions. Or in Java, you'll be familiar with generics in it. In C++ or Java, a similar declaration of a variable of type 'list of integers' would be  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;list&amp;lt;int&amp;gt; list_of_integers;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actually there is no such type &lt;code&gt;list&lt;/code&gt; in C++ or Java. Instead there is a &lt;code&gt;vector&lt;/code&gt; class. I used it just for analogy.&lt;/p&gt;

&lt;p&gt;Here you can see that &lt;code&gt;list&amp;lt;int&amp;gt;&lt;/code&gt; in C++ or Java is nothing but a type level application between terms &lt;code&gt;list&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt;, which is just &lt;code&gt;list int&lt;/code&gt; in Haskell.&lt;/p&gt;

&lt;p&gt;In Haskell, there is already a pre-defined list type with different symbols used for constructors &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Nil&lt;/code&gt; and &lt;code&gt;Cons&lt;/code&gt; in our example. Those are&lt;/p&gt;

&lt;p&gt;1) In type level, &lt;code&gt;([])&lt;/code&gt; is type constructor. Hence &lt;code&gt;[Int]&lt;/code&gt;, &lt;code&gt;[Bool]&lt;/code&gt; are concrete types. &lt;code&gt;[a]&lt;/code&gt; is syntactic sugar for &lt;code&gt;([]) a&lt;/code&gt;. Hence &lt;code&gt;[Int]&lt;/code&gt; is actually &lt;code&gt;([]) Int&lt;/code&gt;. &lt;br&gt;
2) In data level, &lt;code&gt;[]&lt;/code&gt; is &lt;code&gt;Nil&lt;/code&gt; data constructor. Haskell can distinguish the role of &lt;code&gt;[]&lt;/code&gt; because it knows where it is being used, in type level or data level. &lt;br&gt;
3) The data constructor &lt;code&gt;(:)&lt;/code&gt; is replacement for &lt;code&gt;Cons&lt;/code&gt;. &lt;code&gt;(:)&lt;/code&gt; is an infix operator and is right associative.&lt;/p&gt;

&lt;p&gt;Hence a variable term of type &lt;code&gt;[Int]&lt;/code&gt; can be defined in Haskell by  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;list_of_ints :: [Int]  
list_of_ints = 1:4:5:Nil  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There's another syntactic sugar for &lt;code&gt;a:b:c:d:Nil&lt;/code&gt; in Haskell, that is &lt;code&gt;[a b c d]&lt;/code&gt;. So above list assignment can be written simply  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-haskell"&gt;list_of_ints :: [Int]  
list_of_ints = [1 4 5]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now you know what magics Haskell is doing when you write a list in notation &lt;code&gt;[a b c .. g h]&lt;/code&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;There's a lot more to be told about functional programming but I am afraid that the post has already gone long, so here I conclude it. The functional programming has its roots in &lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus"&gt;Lambda calculus&lt;/a&gt; which is a mathematical framework for computation and &lt;a href="https://en.wikipedia.org/wiki/Type_theory"&gt;Type theory&lt;/a&gt;. I have borrowed many things from these theories into this post, still many thing are left as they can not be covered in a single post.&lt;/p&gt;</content:encoded></item></channel></rss>